<!--当 metadata-complete="true" 时，禁用注解和可插性支持 -->
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0"
         metadata-complete="false">

    <!--######################################## web.xml introduce ##################################################-->
    <!--
    web.xml 文件的加载顺序：
        Tomcat 在激活、加载、部署web应用时，会解析加载 ${CATALINA_HOME}/conf 目录下所有 web 应用通用的 web.xml，
        然后解析加载 webapps 应用目录中的 WEB-INF/web.xml
        所以如果 web.xml 文件不会写，可以去参考 ${CATALINA_HOME}/conf/web.xml

    web.xml 中各个标签的加载顺序（与声明顺序无关）：
        ServletContext -> context-param -> listener -> filter -> servlet

    为一个 web 应用增加 Servlet 的配置方式：
        原始方式： 编写一个类继承自 HttpServlet，将该类放在 classes 目录下的对应包结构中，修改 web.xml，在其中增加一个 Servlet 声明。
        注解方式： 编写一个类继承自 HttpServlet，并且在该类上使用 @WebServlet 注解将该类声明为 Servlet，将该类放在 classes 目录下的对应包结构中，无需修改 web.xml 文件。
        可插性方式： 编写一个类继承自 HttpServlet，将该类打成 JAR 包，并且在 JAR 包的 META-INF 目录下放置一个 web-fragment.xml 文件，该文件中声明了相应的 Servlet 配置。

    通过 javax.servlet.ServletContainerInitializer 这个 SPI 接口的配置方式：
        Tomcat 容器启动时，通过 ContextConfig 监听器读取 webapps 目录下每个 web 应用的 WEB-INF/lib 目录下所有 jar 包的
        META-INF/services/javax.servlet.ServletContainerInitializer 文件中描述的实现类的全类名，
        通过反射，实例化这些实现类，并配置到 Context 容器中，
        Context 容器启动时，会调用每一个实现类的 onStartUp 方法，
        实现类上的 @HandlesTypes 注解，用于形容传入到 onStartUp 方法第一个参数的 java.lang.Class 实例有哪些
    -->



    <!--######################################## Context Parameter ##################################################-->
    <context-param>
        <param-name>context_param_name</param-name>
        <param-value>context_param_value</param-value>
    </context-param>



    <!--######################################## Listener Settings ##################################################-->
    <listener>
        <listener-class>kasei.javaee.listener.MyServletContextListener</listener-class>
    </listener>



    <!--######################################## Filter Settings ####################################################-->
    <!--自定义编码过滤器：用于过滤 POST 请求-->
    <filter>
        <filter-name>PostCharacterEncodingFilter</filter-name>
        <filter-class>kasei.javaee.filter.PostCharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>charsetEncoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>PostCharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher><!-- 表示当前 filter 可以作用于 客户端直接过来的请求，如果不配 dispacher 标签，默认为该值 -->
        <dispatcher>FORWARD</dispatcher><!-- 表示当前 filter 可以作用于 通过 forward 过来的请求 -->
        <dispatcher>INCLUDE</dispatcher><!-- 表示当前 filter 可以作用于 通过 include 过来的请求 -->
        <dispatcher>ERROR</dispatcher><!-- 表示当前 filter 可以作用于 通过  <error-page> 过来的请求 -->
    </filter-mapping>




    <!--######################################## Servlet Settings ###################################################-->
    <servlet>
        <servlet-name>FirstServlet</servlet-name>
        <servlet-class>kasei.javaee.servlet.FirstServlet</servlet-class>   <!--Servlet的类-->
        <init-param>                                     <!--初始化一个变量，可看成全局变量，可省略-->
            <param-name>param_name</param-name>              <!--变量名称-->
            <param-value>param_value</param-value>              <!--变量值-->
        </init-param>
        <load-on-startup>1</load-on-startup>
        <async-supported>true</async-supported><!-- 表示该 servlet 不支持异步 -->
    </servlet>
    <servlet-mapping>
        <servlet-name>FirstServlet</servlet-name>
        <url-pattern>/servlet/FirstServlet</url-pattern>                   <!--映射的url路径 -->
    </servlet-mapping>

    <servlet>
        <servlet-name>AjaxServlet</servlet-name>
        <servlet-class>kasei.javaee.servlet.AjaxServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>AjaxServlet</servlet-name>
        <url-pattern>/servlet/AjaxServlet</url-pattern>
    </servlet-mapping>



    <!--######################################## Session Settings ###################################################-->
    <session-config>
        <session-timeout>60</session-timeout><!-- 设置 session 过期时间为 60 分钟 -->
    </session-config>

    <!--######################################## Welcome Settings ###################################################-->
    <welcome-file-list>
        <welcome-file>./index.jsp</welcome-file>
        <welcome-file>./view/jsp/index.html</welcome-file>
    </welcome-file-list>

    <!--######################################## Error And Exception Settings #######################################-->
    <!--
    <error-page>
        <error-code>404</error-code>
        <location>/error404.jsp</location>
    </error-page>
    <error-page>
        <exception-type>java.lang.Exception</exception-type>
        <location>/except.jsp</location>
    </error-page>
     -->
</web-app>